{
  "lex": {
    "macros": {
      "ALPHA": "[A-WYZa-z]",
      "CLRF": "\\n",
      "CONTROL": "[\\x00-\\x08]|[\\x0A-\\x1F]|\\x7F",
      "DIGIT": "[0-9]",
      "DQUOTE": "\\x22",
      "SAFE": "!|[\\x23-\\x2B]|[\\x2D-\\x39]|[\\x3C-\\x40]|[\\x5B-\\x60]|[\\x7B-\\x7E]",
      "UTF8-2": "[\\xC2-\\xDF][\\x80-\\xBF]",
      "UTF8-3": "\\xE0[\\xA0-\\xBF][\\x80-\\xBF]|[\\xE1-\\xEC][\\x80-\\xBF]{2}|\\xED[\\x80-\\x9F][\\x80-\\xBF]|[\\xEE-\\xEF][\\x80-\\xBF]{2}",
      "UTF8-4": "\\xF0[\\x90-\\xBF][\\x80-\\xBF]{2}|[\\xF1-\\xF3][\\x80-\\xBF]{3}|\\xF4[\\x80-\\x8F][\\x80-\\xBF]{2}",
      "WSP": "\\s"
    },

    "rules": [
      [":", "return 'COLON';"],
      [",", "return 'COMMA';"],
      ["-", "return 'DASH';"],
      ["=", "return 'EQUALS';"],
      [";", "return 'SEMICOLON';"],
      ["X", "return 'X';"],
      ["{ALPHA}", "return 'ALPHA';"],
      ["{CLRF}", "return 'CLRF';"],
      ["{CONTROL}", "return 'CONTROL';"],
      ["{DIGIT}", "return 'DIGIT';"],
      ["{DQUOTE}", "return 'DQUOTE';"],
      ["{SAFE}", "return 'SAFE';"],
      ["{UTF8-2}", "return 'NON-US-ASCII';"],
      ["{UTF8-3}", "return 'NON-US-ASCII';"],
      ["{UTF8-4}", "return 'NON-US-ASCII';"],
      ["{WSP}", "return 'WSP';"],
      ["$", "return 'EOF';"]
    ]
  },

  "bnf": {
    "file": [
      ["contentLines EOF", "return $1;"]
    ],

    "contentLines": [
      ["contentLine", "$$ = [$1];"],
      ["contentLine contentLines", "$$ = $2; $$.unshift($1);"]
    ],

    "contentLine": [
      ["name COLON value CLRF", "$$ = { name: $1, value: $3 };"],
      ["name paramList COLON value CLRF", "$$ = { name: $1, paramList: $2, value: $4 };"]
    ],

    "name": [
      ["ianaToken", "$$ = $1;"],
      ["xname", "$$ = $1;"]
    ],

    // Importantly, this cannot begin with "X-"
    "ianaToken": [
      ["X alpha alphanumericdash", "$$ = $1 + $2 + $3;"],
      ["X DIGIT alphanumericdash", "$$ = $1 + $2 + $3;"],
      ["ALPHA alphanumericdash", "$$ = $1 + $2;"],
      ["DIGIT alphanumericdash", "$$ = $1 + $2;"],
      ["DASH alphanumericdash", "$$ = $1 + $2;"]
    ],

    "xname": [
      ["X DASH alphanumericdash", "$$ = $1 + $2 + $3;"]
    ],

    "paramList": [
      ["SEMICOLON param", "$$ = [$2];"],
      ["SEMICOLON param paramList", "$$ = $3; $$.unshift($2);"]
    ],

    "param": [
      ["paramName EQUALS paramValues", "$$ = { paramName: $1, paramValues: $3 };"]
    ],

    "paramName": [
      ["ianaToken", "$$ = $1;"],
      ["xname", "$$ = $1;"]
    ],

    "paramValues": [
      ["paramValue", "$$ = [$1];"],
      ["paramValue COMMA paramValues", "$$ = $3; $$.unshift($1);"]
    ],

    "paramValue": [
      ["paramText", "$$ = $1;"],
      ["quotedString", "$$ = $1;"]
    ],

    "paramText": [
      ["", "$$ = '';"],
      ["safeChar paramText", "$$ = $1 + $2;"]
    ],

    "value": [
      ["", "$$ = '';"],
      ["valueChar value", "$$ = $1 + $2;"]
    ],

    "quotedString": [
      ["DQUOTE qSafeString DQUOTE", "$$ = $2;"]
    ],

    "qSafeString": [
      ["", "$$ = '';"],
      ["qSafeChar qSafeString", "$$ = $1 + $2;"]
    ],

    "safeChar": [
      ["NON-US-ASCII", "$$ = $1;"],
      ["SAFE", "$$ = $1;"],
      ["WSP", "$$ = $1;"],
      ["alphanumericdash", "$$ = $1;"]
    ],

    "qSafeChar": [
      ["COLON", "$$ = $1;"],
      ["COMMA", "$$ = $1;"],
      ["SEMICOLON", "$$ = $1;"],
      ["safeChar", "$$ = $1;"]
    ],

    "valueChar": [
      ["CONTROL", "$$ = $1;"],
      ["DQUOTE", "$$ = $1"],
      ["qSafeChar", "$$ = $1;"]
    ],

    "alpha": [
      ["ALPHA", "$$ = $1;"],
      ["X", "$$ = $1;"]
    ],

    "alphanumeric": [
      ["alpha", "$$ = $1;"],
      ["DIGIT", "$$ = $1;"],
      ["alphanumeric alphanumeric", "$$ = $1 + $2;"]
    ],

    "alphanumericdash": [
      ["alpha", "$$ = [$1];"],
      ["DASH", "$$ = [$1];"],
      ["DIGIT", "$$ = [$1];"],
      ["alphanumericdash alphanumericdash", "$$ = $1 + $2;"]
    ]
  }
}
